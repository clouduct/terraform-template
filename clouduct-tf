#!/usr/bin/env bash

set -e


ALL_PHASES="commons network storage compute build"
ALL_ENVS="dev test int prod"

DEFAULT_ENVIRONMENT=dev

# --------------------------------------------------------------------------------------------------
# PREPARE
# --------------------------------------------------------------------------------------------------

TWRAP_CONFIG_FILE=".clouduct-tf"

# ensure we're executing in the correct directory
SCRIPT_DIR=$(cd "$(dirname "$0")"; pwd)
cd "${SCRIPT_DIR}"

BASENAME=$(basename "$0")

# check for existence of config file
if [ -e "$TWRAP_CONFIG_FILE" ]; then
  source "${TWRAP_CONFIG_FILE}"
else
  echo "Could not find configuration file ${TWRAP_CONFIG_FILE}"
  exit 1
fi

if [[ -z $TF_VAR_project_name ]]; then
  echo "missing environment variable TF_VAR_project_name"
  echo "should have been set in $TWRAP_CONFIG_FILE"
  exit 1
fi

if [[ -z $TF_VAR_region ]]; then
  echo "missing environment variable TF_VAR_region"
  echo "should have been set in $TWRAP_CONFIG_FILE"
  exit 1
fi


ALL_PHASES_ALT="${ALL_PHASES// /|}"
ALL_ENVS_ALT="${ALL_ENVS// /|}"

usage() {
  echo "Usage:"
  echo "  ${BASENAME} [env] [phase] [command]"
  echo "  "
  echo "     env           ${ALL_ENVS_ALT} -- default: dev"
  echo "     phase         ${ALL_PHASES_ALT} -- if omitted all phases will be executed"
  echo "     command       plan|apply|destroy ('bootstrap' can only be called once) -- default: plan"
  echo "  "
}

trim() {
  echo "$*" | sed -e 's/ $//' -e 's/^ //'
}

contains() {
  local item="$1"
  local list="$2"

  if [[ " $list " =~ " $item " ]]; then
    return 0
  else
    return 1
  fi
}

# allow to use the variable as match against possible command line arguments:
shopt -s extglob
ALL_PHASES_TEST="+($ALL_PHASES_ALT)"
ALL_ENVS_TEST="+($ALL_ENVS_ALT)"

if contains "$1" "$ALL_ENVS" ; then
  TF_VAR_environment="$1"
  shift
elif [[ -z $TF_VAR_environment ]]; then
  TF_VAR_environment="$DEFAULT_ENVIRONMENT"
fi

while contains "$1" "$ALL_PHASES"; do
  PHASES="$1 $PHASES"
  shift
done

if contains "$1" "bootstrap plan apply destroy"; then
  command="$1"
  shift
fi

if [[ "$1" == "--help" ]]; then
  usage
  exit 0
fi

if [[ $# -gt 0 ]]; then
  echo "unknown parameter(s) $*"
  echo
  usage
  exit 1
fi

# default command: plan
command=${command:-plan}

if [[ "${PHASES}" = "" ]]; then
  PHASES_IN_EXEC_ORDER=$ALL_PHASES
else
  # ensure the phasess are in the correct order
  PHASES=$(echo "$PHASES" | sed -e 's/ $//' -e 's/ /\|/')
  for phase in $ALL_PHASES; do
    if [[ $phase =~ .*${PHASES}.* ]]; then
      PHASES_IN_EXEC_ORDER="$PHASES_IN_EXEC_ORDER $phase"
    fi
  done
fi

PHASES_IN_EXEC_ORDER=$(trim $PHASES_IN_EXEC_ORDER)

INFRA_DIR="$( cd "$( dirname "$0" )" && pwd )"

# --------------------------------------------------------------------------------------------------
# EXECUTE
# --------------------------------------------------------------------------------------------------

if [[ $command == "bootstrap" ]]; then

  echo "HERE"

  pushd "${INFRA_DIR}/bootstrap" > /dev/null

  terraform init -reconfigure
  terraform apply

  popd > /dev/null

else

  echo "$TF_VAR_project_name env: ($TF_VAR_environment) phases: ($PHASES_IN_EXEC_ORDER) command: ($command)"

  for phase in ${PHASES_IN_EXEC_ORDER}; do
    # echo "${INFRA_DIR}/$phase"
    pushd "${INFRA_DIR}/$phase" > /dev/null

    export TF_VAR_bucket="${TF_VAR_project_name}-clouduct-terraform"
    echo "state bucket: $TF_VAR_bucket"

    if [[ $phase = "commons" ]]; then
      KEY="commons"
    else
      KEY=${TF_VAR_environment}/${phase}
    fi
    echo "key: ${KEY}"

    terraform init -reconfigure \
      -backend-config="region=${TF_VAR_region}" \
      -backend-config="bucket=${TF_VAR_bucket}" \
      -backend-config="key=${KEY}"

    terraform "${command}"

    popd > /dev/null

  done

fi

exit 0

